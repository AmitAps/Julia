while loops
for loops



the syntax for a while is


while *condition*
    *loop body*
end


while n < 11
       n = n + 1
       println(n)
end



julia> myfriends = ["aps", "singh", "aks", "singhaps"]
4-element Vector{String}:
 "aps"
 "singh"
 "aks"
 "singhaps"

julia> i = 1
1

julia> while i < length(myfriends)
       friend = myfriends[i]
       println("Hi $friend. it's great to see you")
       i += 1
       end
Hi aps. it's great to see you
Hi singh. it's great to see you
Hi aks. it's great to see you



for loops

The syntax for a for loop is

for *var* in *loop iterable*
  * loop body*
end


for n in 1:10
           println(n)
       end


Note that we could replace in with either = or ε.


Loops -->




julia> m,n = 5, 5
(5, 5)

julia> a = zeros(m, n)
5×5 Matrix{Float64}:
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0


julia> for i in 1:m
          for j in 1:n
              a[i, j] = i + j
          end
      end

julia> a
5×5 Matrix{Float64}:
2.0  3.0  4.0  5.0   6.0
3.0  4.0  5.0  6.0   7.0
4.0  5.0  6.0  7.0   8.0
5.0  6.0  7.0  8.0   9.0
6.0  7.0  8.0  9.0  10.0



julia> B = zeros(m, n)
5×5 Matrix{Float64}:
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0

julia> for i in 1:m, j in 1:n
           B[i, j] = i + j
       end

julia> B
5×5 Matrix{Float64}:
 2.0  3.0  4.0  5.0   6.0
 3.0  4.0  5.0  6.0   7.0
 4.0  5.0  6.0  7.0   8.0
 5.0  6.0  7.0  8.0   9.0
 6.0  7.0  8.0  9.0  10.0


The more "Julia" way to create this addition table would have been with a array comprehension.


c = [ i+ j for i in 1:m, j in 1:n]



for n in1:10 
  A = [i+j for i in 1:n, j in 1:n]
  display(A)
end
